{"version":3,"sources":["Components/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMessage","setWinMessage","changeItem","itemNumber","toast","type","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","body","inverse","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a975c79a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\r\n\r\nconst Icon = ({ name }) => {\r\n  switch (name) {\r\n    case \"circle\":\r\n      return <FaRegCircle className=\"icon\" />;\r\n    case \"cross\":\r\n      return <FaTimes className=\"icon\" />;\r\n    default:\r\n      return <FaPen className=\"icon\" />;\r\n  }\r\n};\r\n\r\nexport default Icon;\r\n","import React, { useState } from \"react\";\n\nimport Icon from \"./Components/Icon\";\n\n// React-Toastify\nimport { toast, ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// ReactStrap\nimport { Card, CardBody, Container, Button, Row, Col } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\n// Custom CSS\nimport \"./App.css\";\n\nconst itemArray = new Array(9).fill(\"empty\");\n\nconst App = () => {\n  const [isCross, setIsCross] = useState(false);\n  const [winMessage, setWinMessage] = useState(\"\");\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMessage(\"\");\n    itemArray.fill(\"empty\", 0, 9);\n  };\n\n  const checkIsWinner = () => {\n    if (\n      itemArray[0] === itemArray[1] &&\n      itemArray[0] === itemArray[2] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[0]} Wins`);\n    } else if (\n      itemArray[3] === itemArray[4] &&\n      itemArray[3] === itemArray[5] &&\n      itemArray[3] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[3]} Wins`);\n    } else if (\n      itemArray[6] === itemArray[7] &&\n      itemArray[6] === itemArray[8] &&\n      itemArray[6] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[6]} Wins`);\n    } else if (\n      itemArray[0] === itemArray[3] &&\n      itemArray[0] === itemArray[6] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[0]} Wins`);\n    } else if (\n      itemArray[1] === itemArray[4] &&\n      itemArray[1] === itemArray[7] &&\n      itemArray[1] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[1]} wins`);\n    } else if (\n      itemArray[2] === itemArray[5] &&\n      itemArray[2] === itemArray[8] &&\n      itemArray[2] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[2]} Wins`);\n    } else if (\n      itemArray[0] === itemArray[4] &&\n      itemArray[0] === itemArray[8] &&\n      itemArray[0] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[0]} Wins`);\n    } else if (\n      itemArray[2] === itemArray[4] &&\n      itemArray[2] === itemArray[6] &&\n      itemArray[2] !== \"empty\"\n    ) {\n      setWinMessage(`${itemArray[2]} Wins`);\n    }\n  };\n\n  const changeItem = (itemNumber) => {\n    if (winMessage) {\n      return toast(winMessage, { type: \"dark\" });\n    }\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = isCross ? \"cross\" : \"circle\";\n      setIsCross(!isCross);\n    } else {\n      return toast(\"It is Already Filled\", { type: \"error\" });\n    }\n\n    checkIsWinner();\n  };\n  return (\n    <Container className=\"p-5\">\n      <ToastContainer position=\"bottom-center\" />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMessage ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-center text-uppercase text-warning\">\n                {winMessage}\n              </h1>\n              <Button color=\"success\" block onClick={reloadGame}>\n                Reload Game\n              </Button>\n            </div>\n          ) : (\n            <h1 className=\"text-center text-uppercase text-warning\">\n              {isCross ? \"Cross\" : \"Circle\"} Turns\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card\n                body\n                inverse\n                color=\"primary\"\n                onClick={() => changeItem(index)}\n              >\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}